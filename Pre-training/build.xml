<?xml version="1.0" encoding="utf-8" ?>
<project name="Task12" basedir="." default="main"
	xmlns:jacoco="antlib:org.jacoco.ant">

	<!--Project structure -->
	<property name="src.dir" value="src/com/nixsolutions/laba5" />
	<property name="src.dir.test"
		value="src/com/nixsolutions/laba10" />
	<property name="lib.dir" value="lib" />


	<!--Build -->
	<property name="build.dir" value="build" />
	<property name="build.dir.test" value="build/testBuild" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="classes.dir.test"
		value="${build.dir}/testClasses" />
	<property name="jar.dir" value="${build.dir}/jar" />

	<!--Reports -->
	<property name="report.dir" value="${build.dir}/reports" />
	<property name="jacoco.report.dir"
		value="${report.dir}/test_coverage" />
	<property name="junit.report.dir" value="${report.dir}/junit" />
	<property name="checkstyle.report.dir"
		value="${report.dir}/checkstyle" />
	<property name="pmd.report.dir" value="${report.dir}/pmd" />
	<property name="findbugs.report.dir"
		value="${report.dir}/findbugs" />

	<!--Checkstyle config -->
	<property name="checkstyle.config"
		value="${lib.dir}/sun-check.xml" />
	<property name="checkstyle.xsl"
		value="${lib.dir}/checkstyle.xsl" />

	<!--Classpath config -->
	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<pathelement location="${classes.dir}" />
		<pathelement location="${classes.dir.test}" />
	</path>
	<property name="checkstyle.path"
		value="${lib.dir}/checkstyle-8.18-all.jar" />


	<!-- Targets -->
	<target name="clean"
		description="clear all generated files in main folder">
		<delete dir="${build.dir}" />
	<delete>
		<fileset dir="." includes="**/*.exec"/>
	</delete>

	</target>

	<target name="compile" description="compile the project">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${classes.dir}"
			classpathref="classpath" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="testcompile" depends="compile"
		description="compile tests of project">
		<mkdir dir="${classes.dir.test}" />
		<javac srcdir="${src.dir.test}" destdir="${classes.dir.test}"
			classpathref="classpath" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>


	<target name="test" depends="testcompile"
		description="launch tests">
		<mkdir dir="${build.dir.test}" />
		<junit fork="yes" printsummary="yes" haltonfailure="no">
			<classpath refid="classpath" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${build.dir.test}">
				<fileset dir="${classes.dir.test}">
					<exclude name="**/JunitTesterImpl.*" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<target name="jar" depends="compile"
		description="creating a jar library from the created classes">
		<mkdir dir="${jar.dir}" />
		<jar destfile="${jar.dir}/${ant.project.name}.jar"
			basedir="${classes.dir}">
		</jar>
	</target>

	<taskdef
		resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
		classpath="${checkstyle.path}" />

	<target name="checkstyle" depends="compile , pmd , findbugs "
		description="code style check (using checkstyle, pmd and findbugs).">
		<mkdir dir="${checkstyle.report.dir}" />

		<checkstyle config="${checkstyle.config}"
			failureProperty="checkstyle.failure" failOnViolation="false">
			<formatter type="xml"
				tofile="${checkstyle.report.dir}/checkstyle_report.xml" />
			<fileset dir="${src.dir}" includes="**/*.java" />
		</checkstyle>
		<xslt in="${checkstyle.report.dir}\checkstyle_report.xml"
			out="${checkstyle.report.dir}\checkstyle_report.html"
			style="${checkstyle.xsl}" />

	</target>


	<taskdef name="findbugs"
		classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		classpath="lib/findbugs.jar">
		<classpath refid="classpath" />
	</taskdef>
	<target name="findbugs" depends="jar">
		<mkdir dir="${findbugs.report.dir}" />
		<findbugs home="lib/findbugs-3.0.1" output="html"
			outputFile="${findbugs.report.dir}/findbugs_report.html">
			<auxClasspath path="${basedir}/lib/regex.jar" />
			<sourcePath path="${basedir}/${src.dir}" />
			<class location="${basedir}/build" />
		</findbugs>
	</target>



	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
		<classpath refid="classpath" />
	</taskdef>
	<target name="pmd">
		<mkdir dir="${pmd.report.dir}" />
		<pmd>
			<formatter type="html"
				toFile="${pmd.report.dir}/pmd_report.html" />
			<ruleset>lib/design.xml</ruleset>
			<ruleset>lib/javabeans.xml</ruleset>
			<ruleset>lib/basic.xml</ruleset>
			<ruleset>lib/imports.xml</ruleset>
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>




	<taskdef uri="antlib:org.jacoco.ant"
		resource="org/jacoco/ant/antlib.xml">
		<classpath path="${lib.dir}/jacocoant.jar" />
	</taskdef>

	<target name="testcoverage" depends="testcompile"
		description="creating a report on code coverage tests">
		<mkdir dir="${jacoco.report.dir}" />
		<jacoco:coverage>
			<junit fork="true" printsummary="yes" haltonfailure="no">
				<classpath refid="classpath" />
				<formatter type="xml" />

				<batchtest todir="${jacoco.report.dir}">
					<fileset dir="${classes.dir.test}">
						<exclude name="**/JunitTesterImpl.*" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<jacoco:report>

			<executiondata>
				<file file="jacoco.exec" />
			</executiondata>

			<structure name="JaCoCo task">
				<classfiles>
					<fileset dir="${classes.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>

			<html destdir="${jacoco.report.dir}" />

		</jacoco:report>

	</target>

	<target name="testreport" depends="test"
		description="creating a report on the execution of unit tests">
		<junitreport todir="${build.dir.test}">
			<fileset dir="${build.dir.test}">
				<include name="*.xml" />
			</fileset>
			<report format="frames" todir="${junit.report.dir}" />
		</junitreport>
	</target>



	<target name="run" depends="jar">
		<java jar="${jar.dir}/${ant.project.name}.jar" fork="true">
		</java>
	</target>
	<target name="clean_all" depends="clean " />
	<target name="all"
		depends="clean, compile ,test, jar, checkstyle ,testreport , testcoverage" />

</project>
